// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity ^0.8.0;

import {SoftLiquidation} from "../../SoftLiquidation.sol";
import {SoftLiquidationParams} from "../../interfaces/ISoftLiquidation.sol";
import {Id} from "../../../lib/morpho-blue/src/interfaces/IMorpho.sol";

library SoftLiquidationAddressLib {
    /// @notice Computes the CREATE2 address of the soft-liquidation contract generated by the `factory`
    /// for a specific Morpho market `id` with the soft-liquidation parameters `softLiquidationParams`.
    /// @param morpho Morpho's address.
    /// @param factory SoftLiquidationFactory contract address.
    /// @param id Morpho market id for the soft-liquidation contract.
    /// @param softLiquidationParams Soft-liquidation parameters.
    /// @return softLiquidationAddress The address of this soft-liquidation contract.
    function computeSoftLiquidationAddress(
        address morpho,
        address factory,
        Id id,
        SoftLiquidationParams memory softLiquidationParams
    ) internal pure returns (address) {
        bytes32 initCodeHash = keccak256(
            abi.encodePacked(type(SoftLiquidation).creationCode, abi.encode(morpho, id, softLiquidationParams))
        );
        return address(uint160(uint256(keccak256(abi.encodePacked(uint8(0xff), factory, uint256(0), initCodeHash)))));
    }
}
